// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //是否为A指令
    Not(in = instruction[15], out = isAIns);
    //跳转位置
    And(a = instruction[2], b = instruction[15], out = jmp1);
    And(a = instruction[1], b = instruction[15], out = jmp2);
    And(a = instruction[0], b = instruction[15], out = jmp3);
    //存储位置
    And(a = instruction[5], b = instruction[15], out = d1);
    And(a = instruction[4], b = instruction[15], out = d2);
    And(a = instruction[3], b = instruction[15], out = writeM);



    //是否要把数据加载进入A寄存器
    Or(a = isAIns, b = d1, out = loadToA);

    //是从ALUoutput 还是从指令load数据进A寄存器
    Mux16(a = instruction, b = aluOut, sel = d1, out = outToA);
    ARegister(in = outToA, load = loadToA, out = AOut);
    
    //选择从A寄存器加载还是从内存加载
    And(a = instruction[12], b = instruction[15], out = isLoadFromA);
    Mux16(a = AOut, b = inM, sel = isLoadFromA, out = aluIn2);
    DRegister(in = aluOut, load = d2, out = aluIn1);

    ALU(x = aluIn1, y = aluIn2, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = outM, out = aluOut, zr = zr, ng= ng);

    //是否跳转。PC中load标识
    And(a = jmp1, b = ng, out = ifJump1);
    And(a = jmp2, b = zr, out = ifJump2);
    Not(in = ng, out = nng);
    Not(in = zr, out = nzr);
    And(a = nng, b = nzr, out = ifPositive);
    And(a = jmp3, b = ifPositive, out = ifJump3);
    Or(a = ifJump1, b = ifJump2, out = tmp);
    Or(a = tmp, b = ifJump3, out = jump);
    PC(in = AOut, load = jump, reset = reset, inc = true, out[0..14] = pc);
    And16(a = AOut, b[0..15] = true, out[0..14] = addressM);
}